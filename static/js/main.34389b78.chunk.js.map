{"version":3,"sources":["TorahPortion.jsx","ReadButtons.jsx","Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["today","Date","nextShabbat","setDate","getDate","getDay","console","log","url","concat","getFullYear","getMonth","TorahPortion","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","englishTitle","hebrewTitle","sefer","startChapter","startVerse","endChapter","endVerse","_this2","fetch","then","data","json","res","p","items","filter","item","date","sort","a","b","_parseHelper","parshaDesc","parshaParts","exec","sc","sv","ec","ev","parseHelper","leyning","torah","setState","title","hebrew","react_default","createElement","Header","as","Component","ReadButtons","Button","content","Footer","Container","className","href","App","textAlign","src_TorahPortion","src_ReadButtons","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAGMA,EAAQ,IAAIC,KACZC,EAAc,IAAID,KAAKD,GAC7BE,EAAYC,QAAQH,EAAMI,WAAa,GAAQJ,EAAMK,UAAY,GACjEC,QAAQC,IAAIL,GACZ,IAAMM,EAAG,yDAAAC,OAA4DP,EAAYQ,cAAxE,WAAAD,OAA+FP,EAAYS,WAClH,EADO,mBA6DMC,cAvCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,aAAc,KACdC,YAAa,KACbC,MAAO,KACPC,aAAc,KACdC,WAAY,KACZC,WAAY,KACZC,SAAU,MATKd,mFAaC,IAAAe,EAAAZ,KAClBa,MAAMtB,GACHuB,KAAK,SAAAC,GACJ,OAAOA,EAAKC,SAEbF,KAAK,SAAAG,GACJ,IAAMC,EAAiBD,EArCEE,MAC5BC,OAAO,SAAAC,GAAI,OAAI,IAAIrC,KAAKqC,EAAKC,OAASvC,IACtCwC,KAAK,SAACC,EAAGC,GAAJ,OAAU,IAAIzC,KAAKwC,EAAEF,MAAQ,IAAItC,KAAKyC,EAAEH,QAAO,GAkCtCI,EA9BC,SAAAC,GAClB,IAAMC,EAAc,uCAAuCC,KAAKF,GAChE,MAAO,CACLpB,MAAOqB,EAAY,GACnBE,GAAIF,EAAY,GAChBG,GAAIH,EAAY,GAChBI,GAAIJ,EAAY,GAChBK,GAAIL,EAAY,IAyBsBM,CAAYhB,EAAEiB,QAAQC,OAAhD7B,EAFGmB,EAEHnB,MAAOuB,EAFJJ,EAEII,GAAIC,EAFRL,EAEQK,GAAIC,EAFZN,EAEYM,GAAIC,EAFhBP,EAEgBO,GAC3BrB,EAAKyB,SAAS,CACZhC,aAAca,EAAEoB,MAChBhC,YAAaY,EAAEqB,OACfhC,MAAOA,EACPC,aAAcsB,EACdrB,WAAYsB,EACZrB,WAAYsB,EACZrB,SAAUsB,uCAKT,IACC5B,EAAiBL,KAAKI,MAAtBC,aACR,OAAOmC,EAAAhB,EAAAiB,cAACC,EAAA,EAAD,CAAQC,GAAG,MAAMtC,UApCDuC,sBCbZC,mLAVX,OACIL,EAAAhB,EAAAiB,cAAA,WACAD,EAAAhB,EAAAiB,cAACK,EAAA,EAAD,CAAQC,QAAQ,oBAChBP,EAAAhB,EAAAiB,cAACK,EAAA,EAAD,CAAQC,QAAQ,yBAChBP,EAAAhB,EAAAiB,cAACK,EAAA,EAAD,CAAQC,QAAQ,wBANEH,aCWXI,mLATX,OACER,EAAAhB,EAAAiB,cAACQ,EAAA,EAAD,CAAWC,UAAU,UAArB,MACKV,EAAAhB,EAAAiB,cAAA,KAAGU,KAAK,wBAAR,eADL,yBAEWX,EAAAhB,EAAAiB,cAAA,KAAGU,KAAK,uBAAR,UAFX,gBAHeP,aCiBNQ,2LAXX,OACEZ,EAAAhB,EAAAiB,cAACQ,EAAA,EAAD,CAAWI,UAAU,SAASH,UAAU,WACtCV,EAAAhB,EAAAiB,cAAA,4CACAD,EAAAhB,EAAAiB,cAACa,EAAD,MACAd,EAAAhB,EAAAiB,cAACc,EAAD,MACAf,EAAAhB,EAAAiB,cAACe,EAAD,cAPUZ,cCGEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOvB,EAAAhB,EAAAiB,cAACuB,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.34389b78.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Header } from \"semantic-ui-react\";\n\nconst today = new Date();\nconst nextShabbat = new Date(today);\nnextShabbat.setDate(today.getDate() + (6 + 7 - today.getDay()) % 7);\nconsole.log(nextShabbat);\nconst url = `https://www.hebcal.com/hebcal/?v=1&cfg=json&s=on&year=${nextShabbat.getFullYear()}&month=${nextShabbat.getMonth() +\n  1}&ss=on&geo=none`;\n\nconst parshaFilter = apiResponse => {\n  const nextParsha = apiResponse.items\n    .filter(item => new Date(item.date) >= today)\n    .sort((a, b) => new Date(a.date) - new Date(b.date))[0];\n  return nextParsha;\n};\n\nconst parseHelper = parshaDesc => {\n  const parshaParts = /([a-z]+) (\\d+):(\\d+) - (\\d+):(\\d+)/gi.exec(parshaDesc);\n  return {\n    sefer: parshaParts[1],\n    sc: parshaParts[2],\n    sv: parshaParts[3],\n    ec: parshaParts[4],\n    ev: parshaParts[5]\n  };\n};\n\nclass TorahPortion extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      englishTitle: null,\n      hebrewTitle: null,\n      sefer: null,\n      startChapter: null,\n      startVerse: null,\n      endChapter: null,\n      endVerse: null\n    };\n  }\n\n  componentDidMount() {\n    fetch(url)\n      .then(data => {\n        return data.json();\n      })\n      .then(res => {\n        const p = parshaFilter(res);\n        const { sefer, sc, sv, ec, ev } = parseHelper(p.leyning.torah);\n        this.setState({\n          englishTitle: p.title,\n          hebrewTitle: p.hebrew,\n          sefer: sefer,\n          startChapter: sc,\n          startVerse: sv,\n          endChapter: ec,\n          endVerse: ev\n        });\n      });\n  }\n\n  render() {\n    const { englishTitle } = this.state;\n    return <Header as=\"h1\">{englishTitle}</Header>;\n  }\n}\n\nexport default TorahPortion;\n","import React, { Component } from \"react\";\nimport {Button} from \"semantic-ui-react\";\n\nclass ReadButtons extends Component {\n  render() {\n    return (\n        <div>\n        <Button content=\"Read on Sefaria\" />\n        <Button content=\"Read on Mechon-Mamre\" />\n        <Button content=\"Read on ORT\" />\n        </div>\n    );\n  }\n}\n\nexport default ReadButtons;\n","import React, { Component } from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <Container className=\"footer\">\n        An <a href=\"https://alisonc.net/\">Alison Chan</a> production.\n        Uses the <a href=\"https://hebcal.com/\">Hebcal</a> API.\n      </Container>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { Container } from \"semantic-ui-react\";\nimport TorahPortion from \"./TorahPortion\";\nimport ReadButtons from \"./ReadButtons\";\nimport Footer from \"./Footer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container textAlign=\"center\" className=\"content\">\n        <p>This week's Torah portion is...</p>\n        <TorahPortion />\n        <ReadButtons />\n        <Footer />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}